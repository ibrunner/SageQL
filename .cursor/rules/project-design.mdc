---
description: 
globs: 
alwaysApply: true
---
# SageQL - GraphQL AI Agent Framework

## Project Overview

SageQL is an open-source tool designed to streamline the creation of AI-powered interfaces for GraphQL APIs. By leveraging LLMs and the Model Context Protocol (MCP), this framework enables developers to create natural language interfaces to their GraphQL data without extensive prompt engineering or AI expertise.

## Core Vision

To create a developer-friendly framework that transforms complex GraphQL schemas into AI-accessible interfaces, allowing for natural language interactions with structured data sources.

## Architecture

### System Components

1. **Schema Processor**

   - Handles GraphQL introspection
   - Transforms schema into LLM-optimized format
   - Identifies key entities and relationships

2. **Query Generator**

   - Takes natural language intents
   - Generates valid GraphQL queries
   - Validates against schema constraints

3. **Memory System**

   - Caches successful queries
   - Stores patterns of user intents
   - Learns from failed attempts

4. **Orchestration Engine**

   - Manages multi-agent workflows via LangGraph
   - Handles state transitions between specialized agents
   - Provides fault tolerance and recovery

5. **MCP Integration Layer**

   - Exposes framework capabilities as MCP-compatible tools
   - Enables direct interaction with Claude and other LLMs
   - Standardizes input/output formats

6. **Development Environments**
   - Local server for interactive development
     - Local MCP Integration with desktop apps/IDE
     - Output generation for static/in-memory production deployment
   - Container for stand-alone server, memory database
     - configuration for internal/external storage
     - MCP interface against production server

### Agent Architecture

The framework employs a multi-agent approach, with each agent specializing in a specific aspect of GraphQL interaction:


1. **Schema/Planning Agent**

   - Expert in understanding GraphQL schema structure
   - Maps natural language concepts to schema elements
   - Identifies relevant types and fields for a given intent
   - Can break complicated requests into a series or parallel or sequential queries

2. **Query Builder Agent**

   - Specializes in GraphQL syntax
   - Constructs valid operations (queries, mutations)
   - Handles variables and arguments

3. **Validation Agent**

   - Verifies query correctness against schema
   - Identifies and resolves errors
   - Suggests alternatives for invalid queries

4. **Execution Agent**

   - Handles communication with GraphQL API
   - Manages authentication and error handling
   - Formats responses for human consumption

5. **Learning Agent (Optional)**
   - Analyzes patterns of successful interactions
   - Refines query templates based on feedback
   - Improves agent performance over time

### Workflow

```
User Request → Schema Agent → Query Builder → Validation Agent →
                ↑                                      |
                |                                      ↓
            Learning Agent ← Execution Agent ← Valid Query
```

## Implementation Plan

### Phase 1: Core Framework 

1. **Schema Processing Module**
   - Introspection query handler
   - Schema transformation utilities

2. **Basic Query Generation**
   - Single-agent implementation
   - Simple validation against schema

3. **LangGraph Integration**
   - Define agent nodes and responsibilities
   - Implement state management
   - Create basic flow control logic

### Phase 2: Optimization and fine-tuning

1. **Schema Optimization**
   - Context optimization for LLM consumption
   - Schema compression

4. **Specialized Agent Development**
   - Planning agent - breaks intents into multi-step queries
   - Detailed Schema agent - provides additional schema to context
   - Intents Schema agent - Vectorized schema sections by intent
   - Basic template for user-added prompts to provide API context

3. **MCP Tool Definitions**
   - Define standard interfaces for GraphQL operations
   - Implement MCP-compatible API endpoints
   - Create developer documentation

4. **In-Memory System**
   - Simple Vectorization of schema for intents
   - Design caching mechanism for queries
   - Implement feedback loop for successful/failed queries
   

### Phase 3: Developer Experience

1. **Local Development Environment**
   - Create CLI tools for setup and configuration
   - Implement local server for MCP tool hosting

2. **Output Generation**
   - Develop prompt template generation
   - Create LangGraph code output
   - Build configuration file generator

3. **Admin UI**
   - Onboarding - Keys, introspection, validation
   - Human-in-the-loop fine-tuning with specialized prompt and agent
   - Chat UI for debugging and testing

4. **Documentation and Examples**
   - Create comprehensive documentation
   - Build demos with public GraphQL APIs
   - Provide sample implementations for common use cases

### Phase 4: Advanced Configuration and Deployment

1. **Containers and outputs**
   - Container configuration
   - Deployment and backup documentation

2. **Persistent memory/storage**
   - Create persistence layer for long-term learning
   - Database / containers for persistent memory
   - Vector and object storage
   - Working/faulty query recall
   
3. **Advanced Configuration and Features**
   - Create testing/evaluation framework for agent performance
   - Vectorization of query intents
   - advanced admin UI with prompt editing, storage browsing, metrics

## Technical Specifications

### NPM Package Structure

```
graphql-ai-agent/
├── packages/
│   ├── core/                  # Core framework functionality
│   ├── schema-agent/          # Schema understanding capabilities
│   ├── query-builder/         # Query generation utilities
│   ├── validator/             # Query validation tools
│   ├── execution/             # API communication handlers
│   ├── memory/                # Caching and learning system
│   ├── orchestration/         # LangGraph integration
│   └── cli/                   # Developer tools and utilities
├── examples/                  # Example implementations
│   ├── github-api/            # GitHub GraphQL demo
│   ├── spacex-api/            # SpaceX GraphQL demo
│   └── slack-bot/             # Slack integration example
└── docs/                      # Documentation
```

### MCP Tool Definitions

The framework will expose the following MCP-compatible tools:

1. **Introspect Schema**

   ```json
   {
     "type": "function",
     "function": {
       "name": "introspect_schema",
       "description": "Performs introspection on a GraphQL API endpoint",
       "parameters": {
         "type": "object",
         "properties": {
           "endpoint": {
             "type": "string",
             "description": "GraphQL API endpoint URL"
           },
           "headers": {
             "type": "object",
             "description": "Optional headers for authentication"
           }
         },
         "required": ["endpoint"]
       }
     }
   }
   ```

2. **Validate Query**

   ```json
   {
     "type": "function",
     "function": {
       "name": "validate_query",
       "description": "Validates a GraphQL query against a schema",
       "parameters": {
         "type": "object",
         "properties": {
           "query": {
             "type": "string",
             "description": "GraphQL query to validate"
           }
         },
         "required": ["query"]
       }
     }
   }
   ```

3. **Execute Query**
   ```json
   {
     "type": "function",
     "function": {
       "name": "execute_query",
       "description": "Executes a GraphQL query against an endpoint",
       "parameters": {
         "type": "object",
         "properties": {
           "query": {
             "type": "string",
             "description": "GraphQL query to execute"
           },
           "variables": {
             "type": "object",
             "description": "Variables for the query"
           }
         },
         "required": ["query"]
       }
     }
   }
   ```

### LangGraph Integration

The framework will use LangGraph for orchestrating the multi-agent workflow:

```typescript
import { StateGraph } from "langgraph/graph";
import { ToolNode, Tool } from "langgraph/prebuilt/tools";

// Define tool interfaces
interface SchemaTools {
  introspectSchema: Tool;
  analyzeSchema: Tool;
}

interface QueryTools {
  generateQuery: Tool;
  refineQuery: Tool;
}

interface ValidationTools {
  validateQuery: Tool;
  suggestFixes: Tool;
}

interface ExecutionTools {
  executeQuery: Tool;
  formatResponse: Tool;
}

// Define agent nodes
const schemaAgent = new ToolNode<SchemaTools>({
  tools: [introspectSchema, analyzeSchema],
});

const queryBuilder = new ToolNode<QueryTools>({
  tools: [generateQuery, refineQuery],
});

const validator = new ToolNode<ValidationTools>({
  tools: [validateQuery, suggestFixes],
});

const executor = new ToolNode<ExecutionTools>({
  tools: [executeQuery, formatResponse],
});

// Create the graph
const workflow = new StateGraph();

// Add nodes
workflow.addNode("schema", schemaAgent);
workflow.addNode("build", queryBuilder);
workflow.addNode("validate", validator);
workflow.addNode("execute", executor);

// Define edges
workflow.addEdge("schema", "build");
workflow.addEdge("build", "validate");
workflow.addEdge("validate", "execute");
workflow.addEdge("validate", "build", { condition: needsRefinement });
```

## User Workflow

1. **Developer Setup**

   ```bash
   npm install -g graphql-ai-agent
   graphql-ai setup
   ```

2. **Connect to API**

   ```bash
   graphql-ai connect --endpoint=https://api.example.com/graphql --auth=token
   ```

3. **Start Development Server**

   ```bash
   graphql-ai dev
   ```

4. **Interact with Claude Desktop**

   - Connect Claude Desktop to local server
   - Collaborate on query design and testing
   - Refine the agent behavior interactively

5. **Generate Production Assets**

   ```bash
   graphql-ai generate --output=./my-project
   ```

6. **Deploy Solution**
   - Integrate generated code with application
   - Configure API authentication
   - Deploy as serverless function, Slack app, etc.

## Use Cases

1. **Slack Integration for Project Management**

   - Connect to Linear, JIRA, or similar GraphQL APIs
   - Allow team members to query project status via natural language
   - Enable updates and task creation through conversation

2. **Internal Developer Tools**

   - Create natural language interfaces to complex data systems
   - Enable non-technical team members to access structured data
   - Reduce learning curve for new team members

3. **Customer-Facing Chatbots**

   - Interface with product APIs to answer customer queries
   - Enable self-service for common data needs
   - Provide personalized data access through conversation

4. **Data Analysis Assistant**
   - Connect to data warehouses with GraphQL interfaces
   - Enable analysts to query data using natural language
   - Generate insights and visualizations through conversation

## Extensibility

The framework is designed to be extensible in several ways:

1. **Custom Agents**

   - Developers can create specialized agents for domain-specific needs
   - Custom agents can be integrated into the workflow
   - Agent capabilities can be extended with specialized knowledge

2. **Integration with Other Tools**

   - Support for vector databases (optional)
   - Integration with monitoring and observability tools
   - Compatibility with CI/CD pipelines

3. **Low-Code/No-Code Platform Integration**
   - Exporters for n8n, Zapier, Bubble, etc.
   - Custom nodes for workflow platforms
   - Monetization options through marketplace listings

## Future Directions

1. **Federated GraphQL Support**

   - Handling multiple interconnected schemas
   - Cross-schema reasoning and query generation
   - Performance optimization for complex federated queries

2. **Advanced Learning Capabilities**

   - Fine-tuning on domain-specific queries
   - Adaptive behavior based on user preferences
   - Proactive query suggestions based on usage patterns

3. **Multi-Modal Interaction**

   - Visual representation of GraphQL schema
   - Interactive query building through visual interfaces
   - Support for data visualization of query results

4. **Enterprise Features**
   - Role-based access control integration
   - Audit logging and compliance features
   - Enhanced security and privacy controls

## Conclusion

The GraphQL AI Agent Framework aims to bridge the gap between natural language and structured data access through GraphQL. By leveraging the power of LLMs, Model Context Protocol, and multi-agent orchestration, this framework will enable developers to create intuitive, conversational interfaces to their data without extensive AI expertise.
